#include <stdio.h>
    
    // Output Seek Sequence
    printf("Seek Sequence:");
    for (int i = 0; i < seq_count; i++) {
        printf(" %d", seek_sequence[i]);
    }
    printf(" \n");
}

int main() {
    int n;
    int requests[MAX_REQUESTS];
    int initial_head;
    char direction[10];

    // Input 1: Number of disk requests
    printf("Enter number of disk requests (max %d): ", MAX_REQUESTS);
    if (scanf("%d", &n) != 1 || n <= 0 || n > MAX_REQUESTS) {
        fprintf(stderr, "Invalid input for number of requests.\n");
        return 1;
    }
    
    // Input 2: Disk requests
    printf("Enter the disk requests (space separated): ");
    for (int i = 0; i < n; i++) {
        if (scanf("%d", &requests[i]) != 1 || requests[i] < DISK_MIN || requests[i] > DISK_MAX) {
            fprintf(stderr, "Invalid input for disk request %d.\n", i + 1);
            return 1;
        }
    }
    
    // Input 3: Initial head position
    printf("Enter initial head position (0-%d): ", DISK_MAX);
    if (scanf("%d", &initial_head) != 1 || initial_head < DISK_MIN || initial_head > DISK_MAX) {
        fprintf(stderr, "Invalid input for initial head position.\n");
        return 1;
    }
    
    // Input 4: Direction of head movement
    printf("Enter direction (left/right): ");
    if (scanf("%s", direction) != 1) {
        fprintf(stderr, "Invalid input for direction.\n");
        return 1;
    }
    
    // Ensure direction is lowercase for reliable comparison
    for(char *p = direction; *p; p++) *p = tolower(*p);

    if (strcmp(direction, "left") != 0 && strcmp(direction, "right") != 0) {
        fprintf(stderr, "Invalid direction entered. Use 'left' or 'right'.\n");
        return 1;
    }

    simulate_scan(requests, n, initial_head, direction);

    return 0;
}
