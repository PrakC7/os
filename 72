#include <stdio.h>

// Global shared counter, initialized to 0
int shared_counter = 0;

/**
 * @brief Simulates a process incrementing the shared counter a specified number of times.
 * * @param increments The number of times to increment the counter.
 */
void increment_counter(int increments) {
    for (int i = 0; i < increments; i++) {
        // Sequentially increment the shared counter
        shared_counter++;
    }
}

int main() {
    int increments_p1, increments_p2;
    int expected_value;

    // 1. Take input for Process 1
    printf("Enter how many times Process 1 should increment the counter: ");
    if (scanf("%d", &increments_p1) != 1) {
        fprintf(stderr, "Invalid input for Process 1 increments.\n");
        return 1;
    }

    // 1. Take input for Process 2
    printf("Enter how many times Process 2 should increment the counter: ");
    if (scanf("%d", &increments_p2) != 1) {
        fprintf(stderr, "Invalid input for Process 2 increments.\n");
        return 1;
    }

    // Calculate the expected final value
    // Since the initial counter is 0, the expected value is the sum of increments.
    expected_value = increments_p1 + increments_p2;

    // 2. Execute the increments sequentially
    
    // Process 1 runs first
    increment_counter(increments_p1);

    // Process 2 runs second
    increment_counter(increments_p2);

    // The final value will equal the expected value due to sequential execution.
    
    // 3. Display the result
    printf("Final counter value (expected: %d): %d\n", expected_value, shared_counter);

    return 0;
}

