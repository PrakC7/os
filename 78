#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define MAX_REQUESTS 100
#define DISK_MIN 0 // The minimum cylinder is always 0

// Comparison function for qsort to sort in ascending order
int compare_integers(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

// Function to simulate the SCAN disk scheduling algorithm
void simulate_scan(int requests[], int n, int initial_head, int disk_max) {
    int sorted_requests[MAX_REQUESTS];
    int current_head = initial_head;
    long total_seek_operations = 0;
    
    // Copy and sort the requests
    for (int i = 0; i < n; i++) {
        sorted_requests[i] = requests[i];
    }
    qsort(sorted_requests, n, sizeof(int), compare_integers);
    
    // 1. Split the sorted requests into two groups
    int requests_left_of_head[MAX_REQUESTS];
    int requests_right_of_head[MAX_REQUESTS];
    int left_count = 0;
    int right_count = 0;

    for (int i = 0; i < n; i++) {
        if (sorted_requests[i] < initial_head) {
            requests_left_of_head[left_count++] = sorted_requests[i];
        } else {
            requests_right_of_head[right_count++] = sorted_requests[i];
        }
}
