#include <stdio.h>

// Constants based on the problem description
#define LOGICAL_ADDRESS_SPACE 1024
#define PAGE_SIZE 128
#define NUM_PAGES 8

// Predefined Page Table: Maps Page Number (index) to Frame Number (value)
// Page 0 -> Frame 3
// Page 1 -> Frame 5
// Page 2 -> Frame 1
// Page 3 -> Frame 7
// Page 4 -> Frame 2
// Page 5 -> Frame 6
// Page 6 -> Frame 0
// Page 7 -> Frame 4
const int PAGE_TABLE[NUM_PAGES] = {3, 5, 1, 7, 2, 6, 0, 4};

int main() {
    int logical_address;
    int page_number;
    int offset;
    int frame_number;
    int physical_address;
    
    // Display fixed parameters
    printf("Logical Address Space = %d bytes\n", LOGICAL_ADDRESS_SPACE);
    printf("Page Size = %d bytes\n", PAGE_SIZE);
    printf("Number of Pages = %d\n", NUM_PAGES);
    printf("Number of Frames = %d\n", NUM_PAGES); // Assuming Number of Frames = Number of Pages
    printf("Page Table:\n");
    for (int i = 0; i < NUM_PAGES; i++) {
        printf("Page %d -> Frame %d\n", i, PAGE_TABLE[i]);
    }
    
    // 1. Take logical address as input
    printf("Enter a logical address (0 - %d): ", LOGICAL_ADDRESS_SPACE - 1);
    
    if (scanf("%d", &logical_address) != 1) {
        fprintf(stderr, "Invalid input.\n");
        return 1;
    }

    // 4. Validate the entered logical address
    if (logical_address < 0 || logical_address >= LOGICAL_ADDRESS_SPACE) {
        printf("Invalid logical address\n");
        return 0;
    }

    // Address is valid, proceed with translation
    printf("Logical Address %d is in:\n", logical_address);
    
    // 2. Calculate Page Number and Offset
    page_number = logical_address / PAGE_SIZE;
    offset = logical_address % PAGE_SIZE;

    printf("Page Number = %d\n", page_number);
    printf("Offset = %d\n", offset);

    // 3. Use the page table to determine the corresponding frame number
    // The page number must be a valid index into the PAGE_TABLE array
    if (page_number >= 0 && page_number < NUM_PAGES) {
        frame_number = PAGE_TABLE[page_number];
        printf("Frame Number from Page Table = %d\n", frame_number);

        // 4. Calculate and display the physical address
        physical_address = (frame_number * PAGE_SIZE) + offset;
        
        printf("Physical Address = (Frame %d * %d) + %d = %d\n",
               frame_number, PAGE_SIZE, offset, physical_address);
    } else {
        // This case should not be reached if the initial address validation is correct, 
        // as page_number is derived from a valid logical_address.
        printf("Error: Page number is outside the bounds of the page table.\n");
    }

    return 0;
}

