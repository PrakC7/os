#include <stdio.h>
            }

            // 4. Perform replacement
            int frame_to_replace;
            if (empty_frame_index != -1) {
                // Case A: Empty frame available
                frame_to_replace = empty_frame_index;
            } else {
                // Case B: Frames full, find the optimal page to replace
                frame_to_replace = find_optimal_page(frames_array, frames, pages, n, i);
            }

            // Load the new page into the chosen frame
            frames_array[frame_to_replace] = incoming_page;
        }
    }

    free(frames_array);
    return page_faults;
}

int main() {
    int n; // number of pages in the reference string
    int frames; // number of available frames
    int pages[MAX_PAGES];
    
    // Input for number of pages
    printf("Enter number of pages: ");
    if (scanf("%d", &n) != 1 || n <= 0 || n > MAX_PAGES) {
        fprintf(stderr, "Invalid input for number of pages.\n");
        return 1;
    }
    
    // Input for the page reference string
    printf("Enter the page reference string: ");
    for (int i = 0; i < n; i++) {
        if (scanf("%d", &pages[i]) != 1) {
            fprintf(stderr, "Invalid input while reading page reference string.\n");
            return 1;
        }
    }
    
    // Input for number of frames
    printf("Enter number of frames: ");
    if (scanf("%d", &frames) != 1 || frames <= 0) {
        fprintf(stderr, "Invalid input for number of frames.\n");
        return 1;
    }

    // Simulate Optimal
    int total_faults = simulate_optimal(pages, n, frames);

    // Output the result
    printf("Total Page Faults = %d\n", total_faults);

    return 0;
}

